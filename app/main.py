import os
import asyncio
import logging
import aiohttp

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FastAPI ---
from fastapi import FastAPI

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Aiogram ---
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F

# ==========================================================
#                  –ß–ê–°–¢–¨ 1: –ö–û–î FastAPI
# ==========================================================

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
log = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI. Uvicorn –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `app`.
app = FastAPI()


@app.post("/generate")
async def generate_key():
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    log.info("API endpoint /generate was called")
    return "vless://test-key-from-api-it-works!"


# ==========================================================
#                  –ß–ê–°–¢–¨ 2: –ö–û–î –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê
# ==========================================================

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
# –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –∏ API –≤ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
API_URL = "http://localhost:8000/generate"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram ---
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    log.info(f"Received /start from user {message.from_user.id} ({message.from_user.full_name})")
    kb = [
        [types.InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á", callback_data="get_vless_key")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:", reply_markup=keyboard)


@dp.callback_query(F.data == "get_vless_key")
async def get_vless_key_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    log.info(f"User {user_id} clicked the button to get a VLESS key.")
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL) as response:
                log.info(f"Internal API request to {API_URL} returned status: {response.status}")
                if response.status == 200:
                    vless_key = await response.text()
                    response_text = (
                        "‚úÖ –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á –≥–æ—Ç–æ–≤!\n\n"
                        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç:\n\n"
                        f"<code>{vless_key}</code>"
                    )
                    await call.message.answer(response_text)
                else:
                    error_text = await response.text()
                    log.error(f"API returned an error. Status: {response.status}, Body: {error_text}")
                    await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á. –°–µ—Ä–≤–µ—Ä API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
        except Exception as e:
            log.exception(f"An unexpected error occurred: {e}")
            await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ë–û–¢–ê ---
# –û–Ω–∞ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ __main__
async def run_bot():
    log.info("Starting bot polling...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π `python main.py` –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ start.sh
    # Uvicorn –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ —ç—Ç–∏–º –∂–µ —Å–∫—Ä–∏–ø—Ç–æ–º.
    try:
        asyncio.run(run_bot())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped!")