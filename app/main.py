import os
import asyncio
import logging
import json
import uuid
import hashlib
from datetime import datetime

# --- –ò–º–ø–æ—Ä—Ç—ã ---
# –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ (–≤–µ–±—Ö—É–∫–æ–≤)
from fastapi import FastAPI

# –î–ª—è Telegram-–±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –î–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, DateTime, Boolean, select

# –î–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Xray
import aiohttp

# ==========================================================
#                  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ==========================================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
log = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SERVER_ADDRESS = os.getenv("VLESS_SERVER_ADDRESS", "shieldvpn.ru")
VPN_PASSWORD = os.getenv("VPN_PASSWORD", "1234")  # –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å!

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π ---
VLESS_GRPC_PORT = 443
VLESS_GRPC_REMARKS = "ShieldVPN_Standard(gRPC)"
VLESS_REALITY_PORT = 8443
VLESS_REALITY_REMARKS = "ShieldVPN_MaxSpeed(REALITY)"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Xray API –∏ REALITY ---
# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏!
REALITY_PUBLIC_KEY = "8PSiSpiSdXQLCGVXszWueRRsqflMboBXBFAx7MDLTjo"
XRAY_API_URL = "http://vpn_xray:62789"  # API Xray —Å–ª—É—à–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Ç—å Docker)
GRPC_INBOUND_TAG = "vless-grpc"
REALITY_INBOUND_TAG = "vless-reality"

# ==========================================================
#                  –ë–ê–ó–ê –î–ê–ù–ù–´–• (SQLite —á–µ—Ä–µ–∑ SQLAlchemy)
# ==========================================================
DATABASE_URL = "sqlite+aiosqlite:///./database/vpn_users.db"
engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine, class_=AsyncSession)
Base = declarative_base()


class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    client_uuid = Column(String, unique=True, nullable=False)
    is_active = Column(Boolean, default=True)
    expires_at = Column(DateTime, nullable=True)


async def init_db():
    os.makedirs("./database", exist_ok=True)
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# ==========================================================
#                  –£–ü–†–ê–í–õ–ï–ù–ò–ï XRAY —á–µ—Ä–µ–∑ API
# ==========================================================
async def xray_api_request(service_path: str, request_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ gRPC-—à–ª—é–∑—É Xray."""
    headers = {'Content-Type': 'application/json'}
    api_endpoint = f"{XRAY_API_URL}/{service_path}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(api_endpoint, headers=headers, json=request_data) as response:
                if response.status == 200:
                    return True
                else:
                    log.error(f"Xray API Error: Status {response.status}, Body: {await response.text()}")
                    return False
    except Exception as e:
        log.error(f"Exception during Xray API call: {e}")
        return False


async def add_user_to_xray(user_uuid: str, email: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–∞ inbound'–∞ —á–µ—Ä–µ–∑ API Xray."""
    user_proto = {"level": 0, "email": email, "id": user_uuid}

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ gRPC inbound
    success_grpc = await xray_api_request(
        "xray.app.proxyman.command.AddUserOperation",
        {"tag": GRPC_INBOUND_TAG, "user": user_proto}
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ REALITY inbound
    success_reality = await xray_api_request(
        "xray.app.proxyman.command.AddUserOperation",
        {"tag": REALITY_INBOUND_TAG, "user": user_proto}
    )

    if success_grpc and success_reality:
        log.info(f"Successfully added user {email} via Xray API.")
        return True
    else:
        log.error(f"Failed to add user {email} to one or more inbounds.")
        return False


# ==========================================================
#                  –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò
# ==========================================================
async def create_or_get_user_keys(telegram_id: int):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ,
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ VLESS –∫–ª—é—á–∏.
    """
    async with AsyncSessionLocal() as db:
        result = await db.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if not user:
            log.info(f"Creating new user for telegram_id: {telegram_id}")
            client_uuid = str(uuid.uuid4())
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray
            success = await add_user_to_xray(user_uuid=client_uuid, email=f"user_{telegram_id}")
            if not success:
                raise Exception("Could not add user to Xray")

            # –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—à—É –ë–î
            new_user = User(telegram_id=telegram_id, client_uuid=client_uuid)
            db.add(new_user)
            await db.commit()
            uuid_to_use = new_user.client_uuid
        else:
            log.info(f"Found existing user for telegram_id: {telegram_id}")
            uuid_to_use = user.client_uuid

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–µ —Å—Å—ã–ª–∫–∏
    grpc_link = (f"vless://{uuid_to_use}@{SERVER_ADDRESS}:{VLESS_GRPC_PORT}?"
                 f"type=grpc&serviceName=vless-grpc&security=tls&sni={SERVER_ADDRESS}"
                 f"#{VLESS_GRPC_REMARKS}")

    reality_link = (f"vless://{uuid_to_use}@{SERVER_ADDRESS}:{VLESS_REALITY_PORT}?"
                    f"type=tcp&security=reality&fp=firefox&pbk={REALITY_PUBLIC_KEY}"
                    f"&sni=www.yahoo.com&sid=ca3be9b8&spx=%2F"
                    f"#{VLESS_REALITY_REMARKS}")

    return grpc_link, reality_link


# ==========================================================
#                  FastAPI (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤)
# ==========================================================
app = FastAPI()


# ==========================================================
#                  Telegram-–±–æ—Ç
# ==========================================================
class GenKeyStates(StatesGroup):
    waiting_for_password = State()


bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîë –ü–æ–ª—É—á–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
    builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


@dp.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text == "üîë –ü–æ–ª—É—á–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
async def request_key_handler(message: types.Message, state: FSMContext):
    await state.set_state(GenKeyStates.waiting_for_password)
    await message.answer(
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(GenKeyStates.waiting_for_password)
async def password_entered_handler(message: types.Message, state: FSMContext):
    if message.text == VPN_PASSWORD:
        await state.clear()
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–∏ –∫–ª—é—á–∏...", reply_markup=get_main_keyboard())
        try:
            grpc_link, reality_link = await create_or_get_user_keys(message.from_user.id)
            response_text = (
                "‚úÖ –í–∞—à–∏ –∫–ª—é—á–∏ –≥–æ—Ç–æ–≤—ã!\n\n"
                "1Ô∏è‚É£ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á (gRPC):**\n"
                "–ù–∞–¥–µ–∂–Ω—ã–π, –º–∞—Å–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Å–∞–π—Ç.\n"
                f"<code>{grpc_link}</code>\n\n"
                "2Ô∏è‚É£ **–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–ª—é—á (REALITY):**\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n"
                f"<code>{reality_link}</code>"
            )
            await message.answer(response_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            log.error(f"Error during key generation for user {message.from_user.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await state.clear()
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot_handler(message: types.Message):
    await message.answer("<b>ShieldVPN Bot</b>\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.")


# ==========================================================
#                  –ó–ê–ü–£–°–ö
# ==========================================================
async def run_bot():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è Telegram-–±–æ—Ç–∞.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    log.info("Starting bot polling...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


# –≠—Ç–æ—Ç –±–ª–æ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π `python main.py` –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ start.sh
# Uvicorn –¥–ª—è FastAPI –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ —ç—Ç–∏–º –∂–µ —Å–∫—Ä–∏–ø—Ç–æ–º.
if __name__ == "__main__":
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é run_bot
        asyncio.run(run_bot())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped!")
