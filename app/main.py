import os
import asyncio
import logging
import uuid
from datetime import datetime

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, DateTime, Boolean, select
import aiohttp

# ==========================================================
#                  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ==========================================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
log = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑ .env —Ñ–∞–π–ª–∞ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SERVER_ADDRESS = os.getenv("VLESS_SERVER_ADDRESS")
VPN_PASSWORD = os.getenv("VPN_PASSWORD")
REALITY_PUBLIC_KEY = os.getenv("REALITY_PUBLIC_KEY")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–ª—é—á–µ–π –∏ API ---
VLESS_GRPC_PORT = 443
VLESS_GRPC_REMARKS = "ShieldVPN_Standard(gRPC)"
VLESS_REALITY_PORT = 8443
VLESS_REALITY_REMARKS = "ShieldVPN_MaxSpeed(REALITY)"
XRAY_API_URL = "http://vpn_xray:62789"
GRPC_INBOUND_TAG = "vless-grpc"
REALITY_INBOUND_TAG = "vless-reality"

# ==========================================================
#                  –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ==========================================================
DATABASE_URL = "sqlite+aiosqlite:///./database/vpn_users.db"
engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine, class_=AsyncSession)
Base = declarative_base()


class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    client_uuid = Column(String, unique=True, nullable=False)


async def init_db():
    os.makedirs("./database", exist_ok=True)
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# ==========================================================
#                  –£–ü–†–ê–í–õ–ï–ù–ò–ï XRAY —á–µ—Ä–µ–∑ API
# ==========================================================
async def add_user_to_xray(user_uuid: str, email: str):
    user_proto = {"level": 0, "email": email, "id": user_uuid}
    api_endpoint = f"{XRAY_API_URL}/xray.app.proxyman.command.AddUserOperation"

    async with aiohttp.ClientSession() as session:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ gRPC inbound
        grpc_payload = {"tag": GRPC_INBOUND_TAG, "user": user_proto}
        resp_grpc = await session.post(api_endpoint, json=grpc_payload)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ REALITY inbound
        reality_payload = {"tag": REALITY_INBOUND_TAG, "user": user_proto}
        resp_reality = await session.post(api_endpoint, json=reality_payload)

        if resp_grpc.status == 200 and resp_reality.status == 200:
            log.info(f"Successfully added user {email} via Xray API.")
            return True
        else:
            log.error(f"Xray API Error: gRPC={await resp_grpc.text()}, REALITY={await resp_reality.text()}")
            return False


# ==========================================================
#                  –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò
# ==========================================================
async def create_or_get_user_keys(telegram_id: int):
    async with AsyncSessionLocal() as db:
        result = await db.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if not user:
            log.info(f"Creating new user for telegram_id: {telegram_id}")
            client_uuid = str(uuid.uuid4())
            success = await add_user_to_xray(user_uuid=client_uuid, email=f"user_{telegram_id}")
            if not success:
                raise Exception("Could not add user to Xray")

            new_user = User(telegram_id=telegram_id, client_uuid=client_uuid)
            db.add(new_user)
            await db.commit()
            uuid_to_use = new_user.client_uuid
        else:
            log.info(f"Found existing user for telegram_id: {telegram_id}")
            uuid_to_use = user.client_uuid

    grpc_link = (f"vless://{uuid_to_use}@{SERVER_ADDRESS}:{VLESS_GRPC_PORT}?"
                 f"type=grpc&serviceName=vless-grpc&security=tls&sni={SERVER_ADDRESS}"
                 f"#{VLESS_GRPC_REMARKS}")
    reality_link = (f"vless://{uuid_to_use}@{SERVER_ADDRESS}:{VLESS_REALITY_PORT}?"
                    f"type=tcp&security=reality&fp=firefox&pbk={REALITY_PUBLIC_KEY}"
                    f"&sni=yahoo.com&sid=ca3be9b8&spx=%2F"
                    f"#{VLESS_REALITY_REMARKS}")

    return grpc_link, reality_link


# ==========================================================
#                  –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢
# ==========================================================
class GenKeyStates(StatesGroup):
    waiting_for_password = State()


bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîë –ü–æ–ª—É—á–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
    builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_keyboard())


@dp.message(F.text == "üîë –ü–æ–ª—É—á–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
async def request_password(message: types.Message, state: FSMContext):
    await state.set_state(GenKeyStates.waiting_for_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(GenKeyStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    await state.clear()
    if message.text == VPN_PASSWORD:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á–∏...", reply_markup=get_main_keyboard())
        try:
            grpc_link, reality_link = await create_or_get_user_keys(message.from_user.id)
            response_text = (
                "‚úÖ –í–∞—à–∏ –∫–ª—é—á–∏ –≥–æ—Ç–æ–≤—ã:\n\n"
                "1Ô∏è‚É£ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á (gRPC):**\n"
                f"<code>{grpc_link}</code>\n\n"
                "2Ô∏è‚É£ **–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–ª—é—á (REALITY):**\n"
                f"<code>{reality_link}</code>"
            )
            await message.answer(response_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            log.error(f"Error during key generation for user {message.from_user.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=get_main_keyboard())


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    await message.answer("<b>ShieldVPN Bot</b>\n\n–ë–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π.")


async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        log.info("Starting bot...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped!")