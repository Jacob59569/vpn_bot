import os
import asyncio
import logging
import aiohttp

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7697602760:AAEdu5NLl2UEZYTuyAit3ImiziiVn_vYppE"
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ docker-compose, –∞ –Ω–µ localhost
API_URL = "http://app:8000/generate"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
log = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram ---
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)  # –î–æ–±–∞–≤–∏–º parse_mode –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
dp = Dispatcher(storage=MemoryStorage())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    log.info(f"Received /start from user {message.from_user.id} ({message.from_user.full_name})")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    kb = [
        [types.InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á", callback_data="get_vless_key")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á"
@dp.callback_query(F.data == "get_vless_key")
async def get_vless_key_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    log.info(f"User {user_id} clicked the button to get a VLESS key.")

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–∞
    async with aiohttp.ClientSession() as session:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É API
            async with session.post(API_URL) as response:
                log.info(f"API request to {API_URL} returned status: {response.status}")

                if response.status == 200:
                    # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á
                    vless_key = await response.text()

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
                    response_text = (
                        "‚úÖ –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á –≥–æ—Ç–æ–≤!\n\n"
                        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç:\n\n"
                        f"<code>{vless_key}</code>"
                    )
                    await call.message.answer(response_text)
                else:
                    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É
                    error_text = await response.text()
                    log.error(f"API returned an error. Status: {response.status}, Body: {error_text}")
                    await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á. –°–µ—Ä–≤–µ—Ä API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")

        except aiohttp.ClientConnectorError as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API (—Å–∞–º–∞—è —á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ –≤ Docker)
            log.error(f"Could not connect to the API server at {API_URL}. Error: {e}")
            await call.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É API.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            log.exception(f"An unexpected error occurred while processing request from user {user_id}: {e}")
            await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    log.info("Starting bot...")
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –ü–†–û–ü–£–°–ö–ê–ï–ú –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped!")