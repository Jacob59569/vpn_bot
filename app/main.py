import os
import asyncio
import logging
import aiohttp
import json
import uuid
import docker
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FastAPI ---
from fastapi import FastAPI, HTTPException

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Aiogram ---
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F

# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# ==========================================================
#                  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ==========================================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
log = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://localhost:8000/generate"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VLESS ---
VLESS_SERVER_ADDRESS = "shieldvpn.ru"
VLESS_GRPC_PORT = 443
VLESS_GRPC_REMARKS = "ShieldVPN"


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VLESS + TCP + REALITY ---
VLESS_REALITY_PORT = 8443
VLESS_REALITY_REMARKS = "ShieldVPN_MaxSpeed(REALITY)"
REALITY_PUBLIC_KEY = "8PSiSpiSdXQLCGVXszWueRRsqflMboBXBFAx7MDLTjo"
REALITY_PRIVATE_KEY = "WDCdXqoRh7xmCDK5ZRkdJc4PrXq9x8N2ZvwFtRFMS34"
REALITY_SNI = "www.yahoo.com"
REALITY_SHORT_ID = "ca3be9b8" # –ú–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π: openssl rand -hex 4


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨ ---
XRAY_CONFIG_PATH = "/app/config.json"  # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É Xray, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏
USER_DB_PATH = "/app/user_database.json"

# --- –ù–û–í–ò–ù–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ FSM ---
class GenKeyStates(StatesGroup):
    waiting_for_password = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è

# ==========================================================
#                  –ß–ê–°–¢–¨ 1: –õ–û–ì–ò–ö–ê API –∏ VLESS
# ==========================================================
app = FastAPI()


def get_user_db():
    """–ß–∏—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        with open(USER_DB_PATH, 'r') as f:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            content = f.read()
            if not content:
                return {}
            return json.loads(content)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        with open(USER_DB_PATH, 'w') as f:
            json.dump({}, f)
        return {}


def save_user_db(db):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    with open(USER_DB_PATH, 'w') as f:
        json.dump(db, f, indent=4)


def add_user_to_xray_config(user_uuid: str, email: str):
    """–ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –û–ë–ê inbound'–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ."""
    try:
        with open(XRAY_CONFIG_PATH, 'r+') as f:
            config = json.load(f)
            new_client = {"id": user_uuid, "email": email}

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–Ω–±–∞—É–Ω–¥–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            for inbound in config.get('inbounds', []):
                if 'clients' not in inbound.get('settings', {}):
                    inbound['settings']['clients'] = []
                inbound['settings']['clients'].append(new_client)

            f.seek(0)
            json.dump(config, f, indent=4)
            f.truncate()
            log.info(f"Successfully added user {email} to ALL inbounds in xray config.")
    except Exception as e:
        log.error(f"Failed to update Xray config file: {e}")
        raise HTTPException(status_code=500, detail="Could not update Xray configuration.")

    try:
        log.info("Restarting 'vpn_xray' container to apply new config...")
        client = docker.from_env()
        container = client.containers.get('vpn_xray')
        container.restart()
        log.info("Container 'vpn_xray' restarted successfully.")
    except Exception as e:
        log.error(f"Failed to restart xray container: {e}")


@app.post("/generate")
async def generate_key(user_info: dict):
    telegram_id_str = str(user_info.get("telegram_id"))
    user_db = get_user_db()

    if telegram_id_str in user_db:
        user_uuid = user_db[telegram_id_str]
        log.info(f"User {telegram_id_str} already has a key. Returning existing UUID: {user_uuid}")
    else:
        log.info(f"User {telegram_id_str} does not have a key. Generating a new one.")
        user_uuid = str(uuid.uuid4())
        email = f"user_{telegram_id_str}"
        add_user_to_xray_config(user_uuid=user_uuid, email=email)
        user_db[telegram_id_str] = user_uuid
        save_user_db(user_db)

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –î–í–ê –∫–ª—é—á–∞ ---
    grpc_link = (f"vless://{user_uuid}@{VLESS_SERVER_ADDRESS}:{VLESS_GRPC_PORT}?"
                 f"type=grpc&serviceName=vless-grpc&security=tls&sni={VLESS_SERVER_ADDRESS}"
                 f"#{VLESS_GRPC_REMARKS}")

    reality_link = (f"vless://{user_uuid}@{VLESS_SERVER_ADDRESS}:{VLESS_REALITY_PORT}?"
                    f"type=tcp&security=reality&fp=firefox&pbk={REALITY_PUBLIC_KEY}"
                    f"&sni={REALITY_SNI}&sid={REALITY_SHORT_ID}&spx=%2F"
                    f"#{VLESS_REALITY_REMARKS}")

    return {"grpc_link": grpc_link, "reality_link": reality_link}


# ==========================================================
#                  –ß–ê–°–¢–¨ 2: –ö–û–î –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê
# ==========================================================
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîë –ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á")
    builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥—É
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    await state.clear()
    log.info(f"Received /start from user {message.from_user.id} ({message.from_user.full_name})")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á"
@dp.message(F.text == "üîë –ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á")
async def request_key_handler(message: types.Message, state: FSMContext):
    log.info(f"User {message.from_user.id} requested a key, asking for password.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è" –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(GenKeyStates.waiting_for_password)
    await message.answer(
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(GenKeyStates.waiting_for_password)
async def password_entered_handler(message: types.Message, state: FSMContext):
    # –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º –ø–∞—Ä–æ–ª—å. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –µ–≥–æ –ª—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    CORRECT_PASSWORD = "1234"

    if message.text == CORRECT_PASSWORD:
        log.info(f"User {message.from_user.id} entered correct password.")
        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –≤—ã–¥–∞—á–∏ –∫–ª—é—á–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        kb = [[types.InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="get_vless_key")]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await message.answer(
            "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–ª—é—á.",
            reply_markup=keyboard
        )
    else:
        log.warning(f"User {message.from_user.id} entered incorrect password.")
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )


# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot_handler(message: types.Message):
    await message.answer(
        "<b>ShieldVPN Bot</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É VPN-—Å–µ—Ä–≤–∏—Å—É."
    )

@dp.callback_query(F.data == "get_vless_key")
async def get_vless_key_handler(call: types.CallbackQuery):
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    user_data_for_api = {"telegram_id": call.from_user.id}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, json=user_data_for_api) as response:
                log.info(f"Internal API request to {API_URL} returned status: {response.status}")
                if response.status == 200:
                    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–∞—Ä—Å–∏–º JSON –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –î–í–£–ú–Ø –∫–ª—é—á–∞–º–∏ ---
                    data = await response.json()
                    grpc_link = data.get("grpc_link")
                    reality_link = data.get("reality_link")

                    response_text = (
                        "‚úÖ –í–∞—à–∏ –∫–ª—é—á–∏ –≥–æ—Ç–æ–≤—ã!\n\n"
                        "1Ô∏è‚É£ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á (gRPC):**\n"
                        "–ù–∞–¥–µ–∂–Ω—ã–π, –º–∞—Å–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Å–∞–π—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n"
                        f"<code>{grpc_link}</code>\n\n"
                        "2Ô∏è‚É£ **–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–ª—é—á (REALITY):**\n"
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ª—É—á—à–∏–π –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n"
                        f"<code>{reality_link}</code>"
                    )
                    await call.message.answer(response_text)
                else:
                    error_text = await response.text()
                    await call.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á. –û—à–∏–±–∫–∞: {error_text}")
        except Exception as e:
            log.exception(f"An critical error occurred: {e}")
            await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ë–û–¢–ê ---
async def run_bot():
    log.info("Starting bot polling...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped!")