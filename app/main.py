import os
import asyncio
import logging
import aiohttp
import json
import uuid
import docker

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FastAPI ---
from fastapi import FastAPI, HTTPException

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Aiogram ---
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F

# ==========================================================
#                  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ==========================================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
log = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://localhost:8000/generate"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VLESS ---
VLESS_SERVER_ADDRESS = "shieldvpn.ru"
VLESS_SERVER_PORT = 443
VLESS_REMARKS = "ShieldVPN"
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨ ---
XRAY_CONFIG_PATH = "/app/config.json"  # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É Xray, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏

# ==========================================================
#                  –ß–ê–°–¢–¨ 1: –õ–û–ì–ò–ö–ê API –∏ VLESS
# ==========================================================
app = FastAPI()


def add_user_to_xray_config(user_id: str, email: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç
    –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä xray –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    try:
        # –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞ config.json
        with open(XRAY_CONFIG_PATH, 'r+') as f:
            config = json.load(f)

            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ inbound –æ–¥–∏–Ω.
            inbound_settings = config['inbounds'][0]['settings']

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª—é—á 'clients' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'clients' not in inbound_settings:
                inbound_settings['clients'] = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID
            # –≠—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å UUID, –Ω–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
            if any(client['id'] == user_id for client in inbound_settings['clients']):
                log.warning(f"Client with ID {user_id} already exists. Skipping add.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            new_client = {"id": user_id, "email": email}
            inbound_settings['clients'].append(new_client)

            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            f.seek(0)
            json.dump(config, f, indent=4)
            f.truncate()
            log.info(f"Successfully updated xray config file for user {email} ({user_id}).")

    except (FileNotFoundError, json.JSONDecodeError, KeyError, IndexError) as e:
        log.error(f"Failed to read or update Xray config file: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å xray
        raise HTTPException(status_code=500, detail="Error updating Xray configuration file.")

    # –®–∞–≥ 2: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Xray –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try:
        log.info("Attempting to restart 'vpn_xray' container to apply new config...")
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker-–¥–µ–º–æ–Ω—É —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
        client = docker.from_env()
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –∏–º–µ–Ω–∏, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ docker-compose.yml
        container = client.containers.get('vpn_xray')
        container.restart()
        log.info("Container 'vpn_xray' restarted successfully.")
    except docker.errors.NotFound:
        log.error(
            "Container 'vpn_xray' not found. Cannot apply new config. Check container_name in docker-compose.yml.")
        # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–æ –∫–ª—é—á –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    except docker.errors.APIError as e:
        log.error(f"Docker API error while restarting 'vpn_xray': {e}")
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∫–ª—é—á –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        log.error(f"An unexpected error occurred while restarting 'vpn_xray': {e}")


@app.post("/generate")
async def generate_key(user_info: dict):
    # ... (–∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ user_id –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ) ...
    user_id = str(uuid.uuid4())
    telegram_user_id = user_info.get("telegram_id", "unknown_user")
    email = f"user_{telegram_user_id}"
    log.info(f"Generating key for Telegram user {telegram_user_id}")
    add_user_to_xray_config(user_id=user_id, email=email)

    # --- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–°–´–õ–ö–ò ---
    vless_link = (
        f"vless://{user_id}@{VLESS_SERVER_ADDRESS}:{VLESS_SERVER_PORT}?"
        f"type=grpc&security=tls&serviceName=vless-grpc&host={VLESS_SERVER_ADDRESS}"
        f"#{VLESS_REMARKS}"
    )

    return vless_link


# ==========================================================
#                  –ß–ê–°–¢–¨ 2: –ö–û–î –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê
# ==========================================================
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    log.info(f"Received /start from user {message.from_user.id} ({message.from_user.full_name})")
    kb = [[types.InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å VLESS –∫–ª—é—á", callback_data="get_vless_key")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:", reply_markup=keyboard)


@dp.callback_query(F.data == "get_vless_key")
async def get_vless_key_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_fullname = call.from_user.full_name
    log.info(f"User {user_id} ({user_fullname}) clicked the button to get a VLESS key.")
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    user_data_for_api = {"telegram_id": user_id, "full_name": user_fullname}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, json=user_data_for_api) as response:
                log.info(f"Internal API request to {API_URL} returned status: {response.status}")
                if response.status == 200:
                    vless_key = await response.text()
                    vless_key = vless_key.strip('"')
                    response_text = (
                        "‚úÖ –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á –≥–æ—Ç–æ–≤!\n\n"
                        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç:\n\n"
                        f"<code>{vless_key}</code>"
                    )
                    await call.message.answer(response_text)
                else:
                    error_text = await response.text()
                    log.error(f"API returned an error. Status: {response.status}, Body: {error_text}")
                    await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á. –°–µ—Ä–≤–µ—Ä API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
        except aiohttp.ClientConnectorError as e:
            log.error(f"Could not connect to the API server at {API_URL}. Error: {e}")
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É API.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            log.exception(f"An unexpected error occurred while processing request from user {user_id}: {e}")
            await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ë–û–¢–ê ---
async def run_bot():
    log.info("Starting bot polling...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped!")